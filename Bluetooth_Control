/* PROGRAM DESCRIPTION & PINOUT 
Mug-O-Matic Bluetooth Program
An Arduino Sketch to read bluetooth signals send from an android phone using RoboRemo app. www.roboremo.com

HW License: Attribution-ShareAlike CC BY-NC-SA 4.0
Last Updated OCT 2018

Attribution Credits:
  Created by Michael Graham, https://engineerdog.com/
  Modified from https://www.roboremo.com/uploads/2/4/5/7/24571986/sketch_bluetooth_servo.ino
  
// The Circuit
//  A0 =  (Joystick 1 switch Connection if in use)
//  A1 =  (Joystick 1 Y dir Connection if in use)
//  A2 =  (Ultrasonic Echo if in use)
//  A3 =  (Ultrasonic Trig if in use)
//  A4 =  (Joystick 1 X dir Connection if in use)
//  A5 =  (Joystick 2 switch Connection if in use)
//  A6 =  (Joystick 2 Y dir Connection if in use)
//  A7 =  (Joystick 2 X dir Connection if in use)
//  D0 (RX) = (Bluetooth TX connection if in use)
//  D1 (TX) = (Bluetooth RX connection if in use)
//  D2(S1) =  Gripper servo
//  D3~(S2)=  X axis servo
//  D4(S3) =  Y axis servo
//  D5~(S4) = Z axis servo 
//  D6~(S5)= 
//  D7(S6)=  
//  D8(S7) =  
//  D9~(S8) = 
//  D10~(S9) = Used as an assembly aid to center servos 
//  D11~ = Embedded Buzzer 
//  D12 = (IR Remote Input if in use)
//  D13 = (Embedded LED on this pin)
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*DECLARATIONS & CONSTANTS* 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{

#define bluetooth Serial
#include <Servo.h>
#define PIN_SERVO_X 3
#define PIN_SERVO_Y 4
#define PIN_SERVO_Z 5

Servo servoX;
Servo servoY;
Servo servoZ;

char cmd[100];
int cmdIndex;
float desiredAngleX = 179/2;
float desiredAngleY = 179/2;
float desiredAngleZ = 179/2;

float Zdmin = 11.0; // 10. Dont want too tight or loose enough to lose contact!
float Zdmax = 36.0; //  Lifted Pen Position
int counterL = 0;
//int led = 1;


void exeCmd() {
  
      if(cmd[0]=='y') {
			desiredAngleY= Serial.parseInt(); 
			servoY.write(desiredAngleY);  
			//c='\n';
		}
		if(cmd[0]=='x') {
			desiredAngleX= Serial.parseInt(); 
			servoX.write(desiredAngleX);   
			//c='\n';
		}
		
		if(cmd[0]=='p') {
			if ( (counterL & 0x01) == 0){
					servoZ.write(Zdmin); 
					//c='\n'	;				
				}
			else{
					servoZ.write(Zdmax); 
					//c='\n'	;				
			}
	    counterL++;
		delay(5);
		}
       
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//*SETUP*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
void setup() {
  
  delay(500); // wait for bluetooth module to start

  bluetooth.begin(9600); // Bluetooth default baud is 115200
  
 // myServo.attach(3);// 1000, 2000);
  
    delay(500); // wait for bluetooth module to start

  servoX.attach( PIN_SERVO_X );  
  servoY.attach( PIN_SERVO_Y );   
  servoZ.attach( PIN_SERVO_Z );   
  
//    Serial.setTimeout(8000);      //Stops attempting to talk to computer is no response after 50 milisenconds. Ensures the the arduino does not read serial for too long

  cmdIndex = 0;
  
  //Serial.print('led 1\n');                  //send completion of the command "d" stands for "done executing"

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//* Main loop*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
void loop() {
  
    //bluetooth.write('led 1\n');                  //send completion of the command "d" stands for "done executing"

  if (Serial.available() ){                  // If data is coming through the USB port to the arduino then...
    
    char c = (char)bluetooth.read();
     
    if(c=='\n') {
      cmd[cmdIndex] = 0;
	  exeCmd();  // execute the command
      cmdIndex = 0; // reset the cmdIndex
	  Serial.flush();                     //clear all other commands piled in the buffer
	  //Serial.print('led 1');
    } else {      
      cmd[cmdIndex] = c;
      if(cmdIndex<99) cmdIndex++;
	  
	}
	 delay(1);

	// }
  
}
}
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}


